rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Users collection - each user can only read/write their own document
    match /users/{userId} {
      // Allow read if user is signed in and requesting their own document
      allow read: if isOwner(userId);
      
      // Allow create only once during signup
      allow create: if isSignedIn() 
                    && isOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.email is string
                    && isValidEmail(request.resource.data.email)
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.lastLogin == request.time;
      
      // Allow update only by the owner and only specific fields
      allow update: if isOwner(userId)
                    && request.resource.data.uid == resource.data.uid  // Can't change uid
                    && request.resource.data.email == resource.data.email  // Can't change email
                    && request.resource.data.createdAt == resource.data.createdAt;  // Can't change createdAt
      
      // Don't allow delete (users should be disabled in Firebase Auth instead)
      allow delete: if false;
    }
    
    // Example: Projects collection (if you add project features later)
    match /projects/{projectId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Example: Analytics collection (read-only for users)
    match /analytics/{docId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow write: if false;  // Only backend can write
    }
    
    // Deny access to everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
